library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity fir_fab is
    Port ( ap_clk : in STD_LOGIC;
           ap_rst : in STD_LOGIC;
           ap_start : in STD_LOGIC;
           x : in STD_LOGIC_VECTOR(31 downto 0);
           y : out STD_LOGIC_VECTOR(31 downto 0));
end fir_fab;

architecture Behavioral of fir_fab is
    -- 100 taps filter
    signal en_fir, en_buff : STD_LOGIC;
    signal buff_cnt : STD_LOGIC_VECTOR(7 downto 0);
    signal in_sample : STD_LOGIC_VECTOR(15 downto 0);
    
    signal buff0, buff1, buff2, buff3, buff4, buff5, buff6, buff7, buff8, buff9 : STD_LOGIC_VECTOR(15 downto 0);
    signal buff10, buff11, buff12, buff13, buff14, buff15, buff16, buff17, buff18, buff19 : STD_LOGIC_VECTOR(15 downto 0);
    -- Repeat for buff20 to buff100
    
    signal tap0, tap1, tap2, tap3, tap4, tap5, tap6, tap7, tap8, tap9 : STD_LOGIC_VECTOR(15 downto 0);
    signal tap10, tap11, tap12, tap13, tap14, tap15, tap16, tap17, tap18, tap19 : STD_LOGIC_VECTOR(15 downto 0);
    -- Repeat for tap20 to tap100
    
    signal acc0, acc1, acc2, acc3, acc4, acc5, acc6, acc7, acc8, acc9 : STD_LOGIC_VECTOR(31 downto 0);
    signal acc10, acc11, acc12, acc13, acc14, acc15, acc16, acc17, acc18, acc19 : STD_LOGIC_VECTOR(31 downto 0);
    -- Repeat for acc20 to acc100
    
begin
    -- Taps for LPF running 
    tap0 <= "0000000000000000";
    tap1 <= "1111111111111111";
    -- Repeat for tap2 to tap100
    
    process(ap_clk, ap_rst)
    begin
        if (ap_rst = '0') then
            buff_cnt <= (others => '0');
            en_fir <= '0';
            en_buff <= '0';
            in_sample <= (others => '0');
        else 
            if rising_edge(ap_clk) then
                buff_cnt <= buff_cnt + 1;
                in_sample <= x;
                en_fir <= '1';
                en_buff <= '1';
            end if;
        end if;
    end process;

    process(ap_clk)
    begin
        if rising_edge(ap_clk) then
            if en_buff = '1' then
                buff0 <= in_sample;
                buff1 <= buff0;
                -- Repeat for buff2 to buff100
            else
                -- Repeat for buff0 to buff100
            end if;
        end if;
    end process;
    
    process(ap_clk)
    begin
        if rising_edge(ap_clk) then
            if en_fir = '1' then
                acc0 <= conv_std_logic_vector(signed(tap0) * signed(buff0), 32);
                acc1 <= conv_std_logic_vector(signed(tap1) * signed(buff1), 32);
                -- Repeat for acc2 to acc100
            else
                -- Repeat for acc0 to acc100
            end if;
        end if;
    end process;

    process(ap_clk)
    begin
        if rising_edge(ap_clk) then
            if en_fir = '1' then
                y <= acc0 + acc1 + acc2 + acc3 + acc4 + acc5 + acc6 + acc7 + acc8 + acc9 +
                     acc10 + acc11 + acc12 + acc13 + acc14 + acc15 + acc16 + acc17 + acc18 + acc19 +
                     acc20 + acc21 + acc22 + acc23 + acc24 + acc25 + acc26 + acc27 + acc28 + acc29 +
                     acc30 + acc31 + acc32 + acc33 + acc34 + acc35 + acc36 + acc37 + acc38 + acc39 +
                     acc40 + acc41 + acc42 + acc43 + acc44 + acc45 + acc46 + acc47 + acc48 + acc49 +
                     acc50 + acc51 + acc52 + acc53 + acc54 + acc55 + acc56 + acc57 + acc58 + acc59 +
                     acc60 + acc61 + acc62 + acc63 + acc64 + acc65 + acc66 + acc67 + acc68 + acc69 +
                     acc70 + acc71 + acc72 + acc73 + acc74 + acc75 + acc76 + acc77 + acc78 + acc79 +
                     acc80 + acc81 + acc82 + acc83 + acc84 + acc85 + acc86 + acc87 + acc88 + acc89 +
                     acc90 + acc91 + acc92 + acc93 + acc94 + acc95 + acc96 + acc97 + acc98 + acc99 + acc100;
            else
                y <= (others => '0');
            end if;
        end if;
    end process;

end Behavioral;

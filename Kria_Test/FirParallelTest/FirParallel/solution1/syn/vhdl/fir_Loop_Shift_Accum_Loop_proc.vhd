-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir_Loop_Shift_Accum_Loop_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_ap_vld : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fir_Loop_Shift_Accum_Loop_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fir_int_int_shift_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal cond_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cond_reg_510 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_start : STD_LOGIC;
    signal grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_done : STD_LOGIC;
    signal grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_idle : STD_LOGIC;
    signal grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_ready : STD_LOGIC;
    signal grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_acc_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_acc_out_ap_vld : STD_LOGIC;
    signal grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_acc_2_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_acc_2_out_ap_vld : STD_LOGIC;
    signal grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_return : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_acc_0_lcssa_phi_fu_244_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call3 : BOOLEAN;
    signal acc_loc_fu_224 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_2_loc_fu_220 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln37_fu_490_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal acc_fu_480_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fir_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fir_int_int_shift_reg_load : IN STD_LOGIC_VECTOR (31 downto 0);
        acc_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        acc_out_ap_vld : OUT STD_LOGIC;
        acc_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        acc_2_out_ap_vld : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;



begin
    grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250 : component fir_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_start,
        ap_done => grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_done,
        ap_idle => grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_idle,
        ap_ready => grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_ready,
        fir_int_int_shift_reg_load => fir_int_int_shift_reg,
        acc_out => grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_acc_out,
        acc_out_ap_vld => grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_acc_out_ap_vld,
        acc_2_out => grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_acc_2_out,
        acc_2_out_ap_vld => grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_acc_2_out_ap_vld,
        ap_return => grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_ready = ap_const_logic_1)) then 
                    grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    y_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                y_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    y_preg <= sext_ln37_fu_490_p1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_acc_2_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                acc_2_loc_fu_220 <= grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_acc_2_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_acc_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                acc_loc_fu_224 <= grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_acc_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                cond_reg_510 <= cond_fu_460_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cond_reg_510 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                fir_int_int_shift_reg <= x;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    acc_fu_480_p4 <= ap_phi_mux_acc_0_lcssa_phi_fu_244_p4(31 downto 16);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_done)
    begin
        if ((grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call3_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call3 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_acc_0_lcssa_phi_fu_244_p4_assign_proc : process(cond_reg_510, ap_CS_fsm_state3, acc_loc_fu_224, acc_2_loc_fu_220)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
            if ((cond_reg_510 = ap_const_lv1_1)) then 
                ap_phi_mux_acc_0_lcssa_phi_fu_244_p4 <= acc_2_loc_fu_220;
            elsif ((cond_reg_510 = ap_const_lv1_0)) then 
                ap_phi_mux_acc_0_lcssa_phi_fu_244_p4 <= acc_loc_fu_224;
            else 
                ap_phi_mux_acc_0_lcssa_phi_fu_244_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_acc_0_lcssa_phi_fu_244_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cond_fu_460_p2 <= "1" when (grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_return = ap_const_lv2_1) else "0";
    grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_start <= grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_start_reg;
        sext_ln37_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(acc_fu_480_p4),32));


    y_assign_proc : process(ap_CS_fsm_state3, sext_ln37_fu_490_p1, y_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            y <= sext_ln37_fu_490_p1;
        else 
            y <= y_preg;
        end if; 
    end process;


    y_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            y_ap_vld <= ap_const_logic_1;
        else 
            y_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;

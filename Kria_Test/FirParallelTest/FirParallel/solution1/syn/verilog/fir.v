// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir_fir,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=6.043357,HLS_SYN_LAT=19,HLS_SYN_TPT=20,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=5092,HLS_SYN_LUT=4768,HLS_VERSION=2022_2}" *)

module fir (
        y,
        x,
        ap_clk,
        ap_rst,
        y_ap_vld,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle
);


output  [31:0] y;
input  [31:0] x;
input   ap_clk;
input   ap_rst;
output   y_ap_vld;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;

wire    Loop_Shift_Accum_Loop_proc_U0_ap_start;
wire    Loop_Shift_Accum_Loop_proc_U0_ap_done;
wire    Loop_Shift_Accum_Loop_proc_U0_ap_continue;
wire    Loop_Shift_Accum_Loop_proc_U0_ap_idle;
wire    Loop_Shift_Accum_Loop_proc_U0_ap_ready;
wire   [31:0] Loop_Shift_Accum_Loop_proc_U0_y;
wire    Loop_Shift_Accum_Loop_proc_U0_y_ap_vld;

fir_Loop_Shift_Accum_Loop_proc Loop_Shift_Accum_Loop_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Loop_Shift_Accum_Loop_proc_U0_ap_start),
    .ap_done(Loop_Shift_Accum_Loop_proc_U0_ap_done),
    .ap_continue(Loop_Shift_Accum_Loop_proc_U0_ap_continue),
    .ap_idle(Loop_Shift_Accum_Loop_proc_U0_ap_idle),
    .ap_ready(Loop_Shift_Accum_Loop_proc_U0_ap_ready),
    .y(Loop_Shift_Accum_Loop_proc_U0_y),
    .y_ap_vld(Loop_Shift_Accum_Loop_proc_U0_y_ap_vld),
    .x(x)
);

assign Loop_Shift_Accum_Loop_proc_U0_ap_continue = 1'b1;

assign Loop_Shift_Accum_Loop_proc_U0_ap_start = ap_start;

assign ap_done = Loop_Shift_Accum_Loop_proc_U0_ap_done;

assign ap_idle = Loop_Shift_Accum_Loop_proc_U0_ap_idle;

assign ap_ready = Loop_Shift_Accum_Loop_proc_U0_ap_ready;

assign y = Loop_Shift_Accum_Loop_proc_U0_y;

assign y_ap_vld = Loop_Shift_Accum_Loop_proc_U0_y_ap_vld;

endmodule //fir

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fir_Loop_Shift_Accum_Loop_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        y,
        y_ap_vld,
        x
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [31:0] y;
output   y_ap_vld;
input  [31:0] x;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] y;
reg y_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] fir_int_int_shift_reg;
wire   [0:0] cond_fu_460_p2;
reg   [0:0] cond_reg_510;
wire    ap_CS_fsm_state2;
wire    grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_start;
wire    grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_done;
wire    grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_idle;
wire    grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_ready;
wire   [31:0] grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_acc_out;
wire    grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_acc_out_ap_vld;
wire   [31:0] grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_acc_2_out;
wire    grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_acc_2_out_ap_vld;
wire   [1:0] grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_return;
reg   [31:0] ap_phi_mux_acc_0_lcssa_phi_fu_244_p4;
wire    ap_CS_fsm_state3;
reg    grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_start_reg;
reg    ap_block_state1_ignore_call3;
reg   [31:0] acc_loc_fu_224;
reg   [31:0] acc_2_loc_fu_220;
wire  signed [31:0] sext_ln37_fu_490_p1;
reg   [31:0] y_preg;
wire   [15:0] acc_fu_480_p4;
reg   [2:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 fir_int_int_shift_reg = 32'd0;
#0 grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_start_reg = 1'b0;
#0 y_preg = 32'd0;
end

fir_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_start),
    .ap_done(grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_done),
    .ap_idle(grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_idle),
    .ap_ready(grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_ready),
    .fir_int_int_shift_reg_load(fir_int_int_shift_reg),
    .acc_out(grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_acc_out),
    .acc_out_ap_vld(grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_acc_out_ap_vld),
    .acc_2_out(grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_acc_2_out),
    .acc_2_out_ap_vld(grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_acc_2_out_ap_vld),
    .ap_return(grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_start_reg <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_start_reg <= 1'b1;
        end else if ((grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_ready == 1'b1)) begin
            grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        y_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            y_preg <= sext_ln37_fu_490_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_acc_2_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        acc_2_loc_fu_220 <= grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_acc_2_out;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_acc_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        acc_loc_fu_224 <= grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_acc_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cond_reg_510 <= cond_fu_460_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((cond_reg_510 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        fir_int_int_shift_reg <= x;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((cond_reg_510 == 1'd1)) begin
            ap_phi_mux_acc_0_lcssa_phi_fu_244_p4 = acc_2_loc_fu_220;
        end else if ((cond_reg_510 == 1'd0)) begin
            ap_phi_mux_acc_0_lcssa_phi_fu_244_p4 = acc_loc_fu_224;
        end else begin
            ap_phi_mux_acc_0_lcssa_phi_fu_244_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_acc_0_lcssa_phi_fu_244_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        y = sext_ln37_fu_490_p1;
    end else begin
        y = y_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        y_ap_vld = 1'b1;
    end else begin
        y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_fu_480_p4 = {{ap_phi_mux_acc_0_lcssa_phi_fu_244_p4[31:16]}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call3 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign cond_fu_460_p2 = ((grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_return == 2'd1) ? 1'b1 : 1'b0);

assign grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_start = grp_Loop_Shift_Accum_Loop_proc_Pipeline_Shift_Accum_Loop_fu_250_ap_start_reg;

assign sext_ln37_fu_490_p1 = $signed(acc_fu_480_p4);

endmodule //fir_Loop_Shift_Accum_Loop_proc

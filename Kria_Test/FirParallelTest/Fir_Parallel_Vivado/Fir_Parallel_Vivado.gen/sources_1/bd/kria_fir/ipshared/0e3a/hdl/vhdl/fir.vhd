-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir is
port (
    y : OUT STD_LOGIC_VECTOR (31 downto 0);
    x : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    y_ap_vld : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of fir is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir_fir,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=6.043357,HLS_SYN_LAT=19,HLS_SYN_TPT=20,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=5092,HLS_SYN_LUT=4768,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal Loop_Shift_Accum_Loop_proc_U0_ap_start : STD_LOGIC;
    signal Loop_Shift_Accum_Loop_proc_U0_ap_done : STD_LOGIC;
    signal Loop_Shift_Accum_Loop_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_Shift_Accum_Loop_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_Shift_Accum_Loop_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_Shift_Accum_Loop_proc_U0_y : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_Shift_Accum_Loop_proc_U0_y_ap_vld : STD_LOGIC;

    component fir_Loop_Shift_Accum_Loop_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        y : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_ap_vld : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    Loop_Shift_Accum_Loop_proc_U0 : component fir_Loop_Shift_Accum_Loop_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_Shift_Accum_Loop_proc_U0_ap_start,
        ap_done => Loop_Shift_Accum_Loop_proc_U0_ap_done,
        ap_continue => Loop_Shift_Accum_Loop_proc_U0_ap_continue,
        ap_idle => Loop_Shift_Accum_Loop_proc_U0_ap_idle,
        ap_ready => Loop_Shift_Accum_Loop_proc_U0_ap_ready,
        y => Loop_Shift_Accum_Loop_proc_U0_y,
        y_ap_vld => Loop_Shift_Accum_Loop_proc_U0_y_ap_vld,
        x => x);




    Loop_Shift_Accum_Loop_proc_U0_ap_continue <= ap_const_logic_1;
    Loop_Shift_Accum_Loop_proc_U0_ap_start <= ap_start;
    ap_done <= Loop_Shift_Accum_Loop_proc_U0_ap_done;
    ap_idle <= Loop_Shift_Accum_Loop_proc_U0_ap_idle;
    ap_ready <= Loop_Shift_Accum_Loop_proc_U0_ap_ready;
    y <= Loop_Shift_Accum_Loop_proc_U0_y;
    y_ap_vld <= Loop_Shift_Accum_Loop_proc_U0_y_ap_vld;
end behav;

-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir is
port (
    y : OUT STD_LOGIC_VECTOR (31 downto 0);
    x : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    y_ap_vld : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of fir is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir_fir,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.128000,HLS_SYN_LAT=104,HLS_SYN_TPT=105,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3572,HLS_SYN_LUT=1517,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal Block_entry5_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry5_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry5_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry5_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry5_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry5_proc_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal data_loc_channel_full_n : STD_LOGIC;
    signal Loop_Shift_Accum_Loop_proc_U0_ap_start : STD_LOGIC;
    signal Loop_Shift_Accum_Loop_proc_U0_ap_done : STD_LOGIC;
    signal Loop_Shift_Accum_Loop_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_Shift_Accum_Loop_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_Shift_Accum_Loop_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_Shift_Accum_Loop_proc_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_loc_channel_full_n : STD_LOGIC;
    signal Block_for_end_proc_U0_ap_start : STD_LOGIC;
    signal Block_for_end_proc_U0_ap_done : STD_LOGIC;
    signal Block_for_end_proc_U0_ap_continue : STD_LOGIC;
    signal Block_for_end_proc_U0_ap_idle : STD_LOGIC;
    signal Block_for_end_proc_U0_ap_ready : STD_LOGIC;
    signal Block_for_end_proc_U0_y : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_for_end_proc_U0_y_ap_vld : STD_LOGIC;
    signal data_loc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal data_loc_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal data_loc_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal data_loc_channel_empty_n : STD_LOGIC;
    signal acc_loc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_loc_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal acc_loc_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal acc_loc_channel_empty_n : STD_LOGIC;

    component fir_Block_entry5_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fir_Loop_Shift_Accum_Loop_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fir_Block_for_end_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        y : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_ap_vld : OUT STD_LOGIC );
    end component;


    component fir_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    Block_entry5_proc_U0 : component fir_Block_entry5_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry5_proc_U0_ap_start,
        ap_done => Block_entry5_proc_U0_ap_done,
        ap_continue => Block_entry5_proc_U0_ap_continue,
        ap_idle => Block_entry5_proc_U0_ap_idle,
        ap_ready => Block_entry5_proc_U0_ap_ready,
        x => x,
        ap_return => Block_entry5_proc_U0_ap_return);

    Loop_Shift_Accum_Loop_proc_U0 : component fir_Loop_Shift_Accum_Loop_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_Shift_Accum_Loop_proc_U0_ap_start,
        ap_done => Loop_Shift_Accum_Loop_proc_U0_ap_done,
        ap_continue => Loop_Shift_Accum_Loop_proc_U0_ap_continue,
        ap_idle => Loop_Shift_Accum_Loop_proc_U0_ap_idle,
        ap_ready => Loop_Shift_Accum_Loop_proc_U0_ap_ready,
        p_read => data_loc_channel_dout,
        ap_return => Loop_Shift_Accum_Loop_proc_U0_ap_return);

    Block_for_end_proc_U0 : component fir_Block_for_end_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_for_end_proc_U0_ap_start,
        ap_done => Block_for_end_proc_U0_ap_done,
        ap_continue => Block_for_end_proc_U0_ap_continue,
        ap_idle => Block_for_end_proc_U0_ap_idle,
        ap_ready => Block_for_end_proc_U0_ap_ready,
        p_read => acc_loc_channel_dout,
        y => Block_for_end_proc_U0_y,
        y_ap_vld => Block_for_end_proc_U0_y_ap_vld);

    data_loc_channel_U : component fir_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry5_proc_U0_ap_return,
        if_full_n => data_loc_channel_full_n,
        if_write => Block_entry5_proc_U0_ap_done,
        if_dout => data_loc_channel_dout,
        if_num_data_valid => data_loc_channel_num_data_valid,
        if_fifo_cap => data_loc_channel_fifo_cap,
        if_empty_n => data_loc_channel_empty_n,
        if_read => Loop_Shift_Accum_Loop_proc_U0_ap_ready);

    acc_loc_channel_U : component fir_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_Shift_Accum_Loop_proc_U0_ap_return,
        if_full_n => acc_loc_channel_full_n,
        if_write => Loop_Shift_Accum_Loop_proc_U0_ap_done,
        if_dout => acc_loc_channel_dout,
        if_num_data_valid => acc_loc_channel_num_data_valid,
        if_fifo_cap => acc_loc_channel_fifo_cap,
        if_empty_n => acc_loc_channel_empty_n,
        if_read => Block_for_end_proc_U0_ap_ready);




    Block_entry5_proc_U0_ap_continue <= data_loc_channel_full_n;
    Block_entry5_proc_U0_ap_start <= ap_start;
    Block_for_end_proc_U0_ap_continue <= ap_const_logic_1;
    Block_for_end_proc_U0_ap_start <= acc_loc_channel_empty_n;
    Loop_Shift_Accum_Loop_proc_U0_ap_continue <= acc_loc_channel_full_n;
    Loop_Shift_Accum_Loop_proc_U0_ap_start <= data_loc_channel_empty_n;
    ap_done <= Block_for_end_proc_U0_ap_done;
    ap_idle <= ((data_loc_channel_empty_n xor ap_const_logic_1) and (ap_const_logic_1 xor acc_loc_channel_empty_n) and Loop_Shift_Accum_Loop_proc_U0_ap_idle and Block_for_end_proc_U0_ap_idle and Block_entry5_proc_U0_ap_idle);
    ap_ready <= Block_entry5_proc_U0_ap_ready;
    y <= Block_for_end_proc_U0_y;
    y_ap_vld <= Block_for_end_proc_U0_y_ap_vld;
end behav;

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir_fir,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.128000,HLS_SYN_LAT=104,HLS_SYN_TPT=105,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3572,HLS_SYN_LUT=1517,HLS_VERSION=2022_2}" *)

module fir (
        y,
        x,
        ap_clk,
        ap_rst,
        ap_start,
        y_ap_vld,
        ap_done,
        ap_ready,
        ap_idle
);


output  [31:0] y;
input  [31:0] x;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   y_ap_vld;
output   ap_done;
output   ap_ready;
output   ap_idle;

wire    Block_entry5_proc_U0_ap_start;
wire    Block_entry5_proc_U0_ap_done;
wire    Block_entry5_proc_U0_ap_continue;
wire    Block_entry5_proc_U0_ap_idle;
wire    Block_entry5_proc_U0_ap_ready;
wire   [31:0] Block_entry5_proc_U0_ap_return;
wire    data_loc_channel_full_n;
wire    Loop_Shift_Accum_Loop_proc_U0_ap_start;
wire    Loop_Shift_Accum_Loop_proc_U0_ap_done;
wire    Loop_Shift_Accum_Loop_proc_U0_ap_continue;
wire    Loop_Shift_Accum_Loop_proc_U0_ap_idle;
wire    Loop_Shift_Accum_Loop_proc_U0_ap_ready;
wire   [31:0] Loop_Shift_Accum_Loop_proc_U0_ap_return;
wire    acc_loc_channel_full_n;
wire    Block_for_end_proc_U0_ap_start;
wire    Block_for_end_proc_U0_ap_done;
wire    Block_for_end_proc_U0_ap_continue;
wire    Block_for_end_proc_U0_ap_idle;
wire    Block_for_end_proc_U0_ap_ready;
wire   [31:0] Block_for_end_proc_U0_y;
wire    Block_for_end_proc_U0_y_ap_vld;
wire   [31:0] data_loc_channel_dout;
wire   [1:0] data_loc_channel_num_data_valid;
wire   [1:0] data_loc_channel_fifo_cap;
wire    data_loc_channel_empty_n;
wire   [31:0] acc_loc_channel_dout;
wire   [1:0] acc_loc_channel_num_data_valid;
wire   [1:0] acc_loc_channel_fifo_cap;
wire    acc_loc_channel_empty_n;

fir_Block_entry5_proc Block_entry5_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_entry5_proc_U0_ap_start),
    .ap_done(Block_entry5_proc_U0_ap_done),
    .ap_continue(Block_entry5_proc_U0_ap_continue),
    .ap_idle(Block_entry5_proc_U0_ap_idle),
    .ap_ready(Block_entry5_proc_U0_ap_ready),
    .x(x),
    .ap_return(Block_entry5_proc_U0_ap_return)
);

fir_Loop_Shift_Accum_Loop_proc Loop_Shift_Accum_Loop_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Loop_Shift_Accum_Loop_proc_U0_ap_start),
    .ap_done(Loop_Shift_Accum_Loop_proc_U0_ap_done),
    .ap_continue(Loop_Shift_Accum_Loop_proc_U0_ap_continue),
    .ap_idle(Loop_Shift_Accum_Loop_proc_U0_ap_idle),
    .ap_ready(Loop_Shift_Accum_Loop_proc_U0_ap_ready),
    .p_read(data_loc_channel_dout),
    .ap_return(Loop_Shift_Accum_Loop_proc_U0_ap_return)
);

fir_Block_for_end_proc Block_for_end_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_for_end_proc_U0_ap_start),
    .ap_done(Block_for_end_proc_U0_ap_done),
    .ap_continue(Block_for_end_proc_U0_ap_continue),
    .ap_idle(Block_for_end_proc_U0_ap_idle),
    .ap_ready(Block_for_end_proc_U0_ap_ready),
    .p_read(acc_loc_channel_dout),
    .y(Block_for_end_proc_U0_y),
    .y_ap_vld(Block_for_end_proc_U0_y_ap_vld)
);

fir_fifo_w32_d2_S data_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_entry5_proc_U0_ap_return),
    .if_full_n(data_loc_channel_full_n),
    .if_write(Block_entry5_proc_U0_ap_done),
    .if_dout(data_loc_channel_dout),
    .if_num_data_valid(data_loc_channel_num_data_valid),
    .if_fifo_cap(data_loc_channel_fifo_cap),
    .if_empty_n(data_loc_channel_empty_n),
    .if_read(Loop_Shift_Accum_Loop_proc_U0_ap_ready)
);

fir_fifo_w32_d2_S acc_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Loop_Shift_Accum_Loop_proc_U0_ap_return),
    .if_full_n(acc_loc_channel_full_n),
    .if_write(Loop_Shift_Accum_Loop_proc_U0_ap_done),
    .if_dout(acc_loc_channel_dout),
    .if_num_data_valid(acc_loc_channel_num_data_valid),
    .if_fifo_cap(acc_loc_channel_fifo_cap),
    .if_empty_n(acc_loc_channel_empty_n),
    .if_read(Block_for_end_proc_U0_ap_ready)
);

assign Block_entry5_proc_U0_ap_continue = data_loc_channel_full_n;

assign Block_entry5_proc_U0_ap_start = ap_start;

assign Block_for_end_proc_U0_ap_continue = 1'b1;

assign Block_for_end_proc_U0_ap_start = acc_loc_channel_empty_n;

assign Loop_Shift_Accum_Loop_proc_U0_ap_continue = acc_loc_channel_full_n;

assign Loop_Shift_Accum_Loop_proc_U0_ap_start = data_loc_channel_empty_n;

assign ap_done = Block_for_end_proc_U0_ap_done;

assign ap_idle = ((data_loc_channel_empty_n ^ 1'b1) & (1'b1 ^ acc_loc_channel_empty_n) & Loop_Shift_Accum_Loop_proc_U0_ap_idle & Block_for_end_proc_U0_ap_idle & Block_entry5_proc_U0_ap_idle);

assign ap_ready = Block_entry5_proc_U0_ap_ready;

assign y = Block_for_end_proc_U0_y;

assign y_ap_vld = Block_for_end_proc_U0_y_ap_vld;

endmodule //fir
